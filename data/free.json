[{"html_filename":"free/docs/docs/Control.Monad.Trans.Free.Church.html","package":"free","namespace":"Control.Monad.Trans.Free.Church","name":"FT","typ":"(Type -> Type) -> (Type -> Type) -> Type -> Type","prefix":"record","html_id":"Control.Monad.Trans.Free.Church.FT"},{"html_filename":"free/docs/docs/Control.Monad.Trans.Free.Church.html","package":"free","namespace":"Control.Monad.Trans.Free.Church","name":"MkFT","typ":"((a -> m r) -> ((x -> m r) -> f x -> m r) -> m r) -> FT f m a","prefix":"","html_id":"Control.Monad.Trans.Free.Church.MkFT"},{"html_filename":"free/docs/docs/Control.Monad.Trans.Free.Church.html","package":"free","namespace":"Control.Monad.Trans.Free.Church","name":".runFT","typ":"FT f m a -> (a -> m r) -> ((x -> m r) -> f x -> m r) -> m r","prefix":"","html_id":"Control.Monad.Trans.Free.Church.FT.(.runFT)"},{"html_filename":"free/docs/docs/Control.Monad.Trans.Free.Church.html","package":"free","namespace":"Control.Monad.Trans.Free.Church","name":"runFT","typ":"FT f m a -> (a -> m r) -> ((x -> m r) -> f x -> m r) -> m r","prefix":"","html_id":"Control.Monad.Trans.Free.Church.FT.runFT"},{"html_filename":"free/docs/docs/Control.Monad.Trans.Free.Church.html","package":"free","namespace":"Control.Monad.Trans.Free.Church","name":"hoistFT","typ":"(Monad m, Monad n) => (m x -> n x) -> FT f m a -> FT f n a","prefix":"","html_id":"Control.Monad.Trans.Free.Church.hoistFT"},{"html_filename":"free/docs/docs/Control.Monad.Trans.Free.Church.html","package":"free","namespace":"Control.Monad.Trans.Free.Church","name":"iterT","typ":"(Functor f, Monad m) => (f (m a) -> m a) -> FT f m a -> m a","prefix":"","html_id":"Control.Monad.Trans.Free.Church.iterT"},{"html_filename":"free/docs/docs/Control.Monad.Trans.Free.Church.html","package":"free","namespace":"Control.Monad.Trans.Free.Church","name":"iterTM","typ":"(Functor f, (Monad m, (MonadTrans t, Monad (t m)))) => (f (t m a) -> t m a) -> FT f m a -> t m a","prefix":"","html_id":"Control.Monad.Trans.Free.Church.iterTM"},{"html_filename":"free/docs/docs/Control.Monad.Trans.Free.html","package":"free","namespace":"Control.Monad.Trans.Free","name":"iterT","typ":"(Functor f, Monad m) => (f (m a) -> m a) -> FreeT f m a -> m a","prefix":"","html_id":"Control.Monad.Trans.Free.iterT"},{"html_filename":"free/docs/docs/Control.Monad.Free.html","package":"free","namespace":"Control.Monad.Free","name":"MonadFree","typ":"(Type -> Type) -> (Type -> Type) -> Type","prefix":"interface","html_id":"Control.Monad.Free.MonadFree"},{"html_filename":"free/docs/docs/Control.Monad.Free.html","package":"free","namespace":"Control.Monad.Free","name":"wrap","typ":"(Functor f, Monad m) => f (m a) -> m a","prefix":"","html_id":"Control.Monad.Free.wrap"},{"html_filename":"free/docs/docs/Control.Monad.Free.html","package":"free","namespace":"Control.Monad.Free","name":"liftF","typ":"(Functor f, (Monad m, MonadFree f m)) => f a -> m a","prefix":"","html_id":"Control.Monad.Free.liftF"}]